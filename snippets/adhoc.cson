'.source.cpp, .source.cc':

  'To calculate time taken by a particular code to run':
    'prefix': 'time'
    'body': '''
      std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
      start = std::chrono::high_resolution_clock::now();
      /*
        Code goes here
      */
      end = std::chrono::high_resolution_clock::now();
      long long elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
      cout << "\nElapsed Time: " << elapsed_time << "ms\n";
     '''

  'Generate random integer'
    'prefix': 'randint'
    'body': '''
      std::random_device rd;
      std::mt19937 mt(rd());
      std::uniform_int_distribution<unsigned int> uint_dist;

      auto randint = [&uint_dist, &mt](int a, int b){
        return uint_dist(mt);
      };
    '''
    
  'Split a c++ string by a delimiter':
    'prefix': 'split-string'
    'body': '''
      void split(const std::string &s, char delim, Out result) {
    	    std::stringstream ss;
    	    ss.str(s);
    	    std::string item;
    	    while (std::getline(ss, item, delim)) {
    	        *(result++) = item;
    	    }
    	}
    	std::vector<std::string> split(const std::string &s, char delim) {
    	    std::vector<std::string> elems;
    	    split(s, delim, std::back_inserter(elems));
    	    return elems;
    	}
    	// Call it as vector<string> arr = split(s, ' ');
    '''
